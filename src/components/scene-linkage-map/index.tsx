import { MapContent } from "@/components";
import "./index.less";
import React, { useEffect, useState, memo } from "react";
import { useLocation } from "react-router-dom";
import { IconClose } from "@arco-design/web-react/icon";
import { Button, Switch } from "@arco-design/web-react";
import classNames from "classnames";
import globalState from "@/globalState";
import * as turf from "@turf/turf";
import { getPlanId, getEventId, getVenueId } from "@/kit";
import cameraUrl from "@/assets/img/common/camera.svg";
import { debounce } from "lodash";
import { observer } from "mobx-react";
import * as webApi from "@/store/webapi";
import store from "@/pages/home/store";
import appStore from "@/store";

interface SceneLinkageMapProps {
  className?: string;
  visible: boolean;
  viewer: any;
  style?: React.CSSProperties;
  setVisible: (val) => void;
  onClose?: () => void;
  onChange?: (res) => void;
}
const getStyles = (val) => {
  switch (val) {
    case "A区":
      return {
        "fill-color": "#ff9013",
        "fill-opacity": 0.5,
        "line-color": "#ff9013", //多边形外边线
        "line-opacity": 0,
        "line-width": 1,
      };
      break;
    case "B区":
      return {
        "fill-color": "#2cd679",
        "fill-opacity": 0.5,
        "line-color": "#2cd679", //多边形外边线
        "line-opacity": 0,
        "line-width": 1,
      };
      break;
    case "C区":
      return {
        "fill-color": "#177bf8",
        "fill-opacity": 0.5,
        "line-color": "#177bf8", //多边形外边线
        "line-opacity": 0,
        "line-width": 1,
      };
      break;
    case "D区":
      return {
        "fill-color": "#826dff",
        "fill-opacity": 0.5,
        "line-color": "#826dff", //多边形外边线
        "line-opacity": 0,
        "line-width": 1,
      };
      break;
    default:
      return {
        "fill-color": "#FFF813",
        "fill-opacity": 0.5,
        "line-color": "#FFF813", //多边形外边线
        "line-opacity": 0,
        "line-width": 1,
      };
      break;
  }
};
const data = {
  type: "FeatureCollection",
  features: [
    {
      type: "Feature",
      properties: {
        id: "A",
        name: "A区",
        center: [108.37853832287419, 22.81425000844864],
        ...getStyles("A区"),
      },
      geometry: {
        type: "MultiPolygon",
        coordinates: [
          [
            [
              [108.377865034099557, 22.814407586124752],
              [108.378064098744915, 22.814407298459088],
              [108.378065249407626, 22.814733367498818],
              [108.378993546532627, 22.814731785337617],
              [108.378989950711727, 22.81377989962748],
              [108.378989878795409, 22.813773283317033],
              [108.378065537073539, 22.81377105390807],
              [108.3780635234138, 22.814113376058284],
              [108.377864458768485, 22.814115677383665],
              [108.377865034099557, 22.814407586124752],
            ],
          ],
        ],
      },
    },
    {
      type: "Feature",
      properties: {
        id: "B",
        name: "B区",
        center: [108.37807832408322, 22.811945739102654],
        ...getStyles("B区"),
      },
      geometry: {
        type: "MultiPolygon",
        coordinates: [
          [
            [
              [108.378039215664558, 22.813325315948596],
              [108.378395201934197, 22.813133802527155],
              [108.378401273629791, 22.813137623635544],
              [108.378407410092365, 22.813141339841088],
              [108.378413609509678, 22.813144950046301],
              [108.378419870050877, 22.813148453184986],
              [108.378426189867042, 22.813151848222585],
              [108.378432567091778, 22.813155134156446],
              [108.37843899984172, 22.813158310016146],
              [108.378445486217103, 22.813161374863775],
              [108.378452024302348, 22.813164327794201],
              [108.378458612166568, 22.813167167935344],
              [108.378465247864199, 22.813169894448436],
              [108.378471929435534, 22.813172506528272],
              [108.378478654907354, 22.813175003403426],
              [108.378485422293423, 22.813177384336512],
              [108.378492229595182, 22.813179648624377],
              [108.378499074802235, 22.813181795598318],
              [108.378505955893004, 22.813183824624272],
              [108.378512870835351, 22.813185735103019],
              [108.378519817587105, 22.813187526470344],
              [108.378526794096686, 22.813189198197207],
              [108.378533798303764, 22.813190749789907],
              [108.378540828139805, 22.81319218079021],
              [108.378547881528718, 22.813193490775515],
              [108.378554956387447, 22.81319467935894],
              [108.378562050626613, 22.813195746189468],
              [108.378569162151081, 22.813196690952037],
              [108.378576288860657, 22.813197513367633],
              [108.378583428650614, 22.813198213193374],
              [108.378590579412389, 22.813198790222582],
              [108.378597739034177, 22.813199244284849],
              [108.378604905401545, 22.813199575246077],
              [108.378612076398085, 22.813199783008525],
              [108.378619249906023, 22.813199867510829],
              [108.378626423806807, 22.813199828728042],
              [108.378633595981825, 22.813199666671615],
              [108.378640764312919, 22.813199381389403],
              [108.378647926683115, 22.813198972965665],
              [108.378655080977154, 22.813198441521013],
              [108.378662225082195, 22.813197787212399],
              [108.378669356888409, 22.813197010233054],
              [108.378676474289563, 22.813196110812449],
              [108.378683575183715, 22.813195089216197],
              [108.378690657473783, 22.813193945746008],
              [108.378697719068171, 22.813192680739579],
              [108.378704757881422, 22.813191294570498],
              [108.378711771834787, 22.813189787648135],
              [108.378718758856834, 22.813188160417525],
              [108.378725716884148, 22.813186413359237],
              [108.378732643861809, 22.813184546989216],
              [108.378739537744124, 22.813182561858653],
              [108.378745630080573, 22.81318090758851],
              [108.378751692806631, 22.813179147893674],
              [108.378757724098122, 22.813177283303602],
              [108.378763722140334, 22.813175314379322],
              [108.378769685128546, 22.813173241713244],
              [108.378775611268622, 22.813171065929005],
              [108.378781498777457, 22.81316878768126],
              [108.378787345883623, 22.813166407655491],
              [108.378793150827818, 22.813163926567807],
              [108.378798911863427, 22.81316134516473],
              [108.378804627257054, 22.813158664222957],
              [108.378810295289043, 22.81315588454914],
              [108.378815914253977, 22.813153006979633],
              [108.378821482461191, 22.813150032380246],
              [108.378826998235326, 22.813146961645991],
              [108.378832459916779, 22.8131437957008],
              [108.378837865862195, 22.813140535497244],
              [108.378843214445055, 22.81313718201627],
              [108.378848504056023, 22.813133736266881],
              [108.378853733103583, 22.813130199285844],
              [108.378858900014379, 22.813126572137378],
              [108.378864003233772, 22.81312285591283],
              [108.378869041226309, 22.813119051730347],
              [108.378874012476132, 22.813115160734544],
              [108.378878915487491, 22.813111184096158],
              [108.378883748785128, 22.813107123011687],
              [108.378888510914805, 22.813102978703043],
              [108.37889320044367, 22.813098752417179],
              [108.378897815960713, 22.813094445425715],
              [108.378902356077234, 22.813090059024553],
              [108.378906819427172, 22.813085594533479],
              [108.378911204667574, 22.813081053295786],
              [108.37891551047899, 22.813076436677857],
              [108.378919735565901, 22.813071746068754],
              [108.378923878657034, 22.8130669828798],
              [108.378927938505811, 22.813062148544155],
              [108.378931913890682, 22.81305724451639],
              [108.378935803615519, 22.813052272272049],
              [108.378939606509988, 22.813047233307188],
              [108.378943321429844, 22.813042129137951],
              [108.378946947257333, 22.813036961300092],
              [108.378950482901516, 22.813031731348531],
              [108.378953927298582, 22.813026440856863],
              [108.378957279412148, 22.813021091416914],
              [108.378960538233642, 22.813015684638241],
              [108.378963702782528, 22.813010222147643],
              [108.378966772106651, 22.8130047055887],
              [108.37896974528249, 22.812999136621244],
              [108.3789726214155, 22.812993516920884],
              [108.378975399640268, 22.812987848178494],
              [108.378978079120884, 22.812982132099702],
              [108.378980659051152, 22.812976370404378],
              [108.378983138654789, 22.81297056482612],
              [108.378985517185754, 22.812964717111726],
              [108.37898779392836, 22.812958829020673],
              [108.378989968197587, 22.812952902324589],
              [108.378992039339238, 22.812946938806714],
              [108.378994006730139, 22.812940940261374],
              [108.378995869778322, 22.812934908493425],
              [108.378997627923255, 22.812928845317725],
              [108.378999280635924, 22.812922752558578],
              [108.379000827419048, 22.812916632049195],
              [108.379002267807238, 22.812910485631132],
              [108.379003601367103, 22.812904315153741],
              [108.379004827697401, 22.812898122473612],
              [108.379005946429146, 22.812891909454024],
              [108.379006957225741, 22.81288567796436],
              [108.37900785978303, 22.812879429879576],
              [108.379008653829473, 22.812873167079609],
              [108.379009339126156, 22.812866891448834],
              [108.379009915466867, 22.812860604875478],
              [108.379010382678189, 22.812854309251069],
              [108.379010740619577, 22.812848006469846],
              [108.379010989183314, 22.812841698428215],
              [108.379011128294607, 22.812835387024155],
              [108.37901115791162, 22.812829074156664],
              [108.379011078025414, 22.812822761725169],
              [108.379010888660034, 22.812816451628983],
              [108.379010589872479, 22.812810145766697],
              [108.379010181752619, 22.812803846035646],
              [108.379009664423265, 22.812797554331304],
              [108.379009038040081, 22.812791272546743],
              [108.379008302791519, 22.812785002572046],
              [108.379007458898798, 22.812778746293741],
              [108.379006506615852, 22.812772505594232],
              [108.379005446229201, 22.812766282351244],
              [108.379004278057877, 22.812760078437243],
              [108.379003002453402, 22.812753895718881],
              [108.379001619799539, 22.812747736056433],
              [108.379000130512338, 22.812741601303237],
              [108.378998535039884, 22.812735493305134],
              [108.378996833862232, 22.81272941389992],
              [108.378995027491243, 22.812723364916785],
              [108.378993116470411, 22.812717348175759],
              [108.378991101374737, 22.812711365487186],
              [108.379071072431685, 22.812667927970647],
              [108.37870832601871, 22.812089144637675],
              [108.378952841840302, 22.811956530762689],
              [108.37830616940866, 22.810922085004567],
              [108.378103077443924, 22.811031685625768],
              [108.378003832786945, 22.810871168180551],
              [108.376881648998747, 22.811475697591213],
              [108.378039215664558, 22.813325315948596],
            ],
          ],
        ],
      },
    },
    {
      type: "Feature",
      properties: {
        id: "C",
        name: "C区",
        center: [108.37674191349635, 22.810720653008133],
        ...getStyles("C区"),
      },
      geometry: {
        type: "MultiPolygon",
        coordinates: [
          [
            [
              [108.376719837057991, 22.811347254868458],
              [108.376140478393694, 22.810424135725555],
              [108.376765000568582, 22.810087279223126],
              [108.377344934564249, 22.811012987357081],
              [108.376719837057991, 22.811347254868458],
            ],
          ],
        ],
      },
    },
    {
      type: "Feature",
      properties: {
        id: "D",
        name: "D区",
        center: [108.3748958831165, 22.810451775416027],
        ...getStyles("D区"),
      },
      geometry: {
        type: "MultiPolygon",
        coordinates: [
          [
            [
              [108.37502117126229, 22.812241319778444],
              [108.375442745305264, 22.812020536374835],
              [108.375654179574497, 22.812366022847456],
              [108.375657830511329, 22.812371870006494],
              [108.375661582632844, 22.812377652756073],
              [108.375665434803054, 22.812383369345383],
              [108.37566938585563, 22.81238901804365],
              [108.375673434594347, 22.812394597140649],
              [108.375677579793404, 22.812400104947233],
              [108.375681820197784, 22.812405539795833],
              [108.375686154523635, 22.81241090004098],
              [108.375690581458684, 22.812416184059778],
              [108.375695099662607, 22.812421390252421],
              [108.375699707767467, 22.812426517042663],
              [108.375704404378098, 22.812431562878292],
              [108.37570918807252, 22.812436526231615],
              [108.375714057402419, 22.812441405599905],
              [108.375719010893533, 22.812446199505871],
              [108.37572404704612, 22.812450906498086],
              [108.375729164335411, 22.812455525151442],
              [108.375734361212096, 22.812460054067582],
              [108.375739636102722, 22.812464491875311],
              [108.375744987410258, 22.81246883723102],
              [108.37575041351451, 22.812473088819093],
              [108.375755912772675, 22.812477245352305],
              [108.375761483519739, 22.812481305572206],
              [108.375767124069114, 22.812485268249507],
              [108.375772832713025, 22.812489132184453],
              [108.375778607723106, 22.812492896207182],
              [108.375784447350895, 22.81249655917809],
              [108.375790349828364, 22.812500119988155],
              [108.375796313368454, 22.812503577559298],
              [108.37580233616562, 22.812506930844684],
              [108.375808416396367, 22.812510178829065],
              [108.37581455221985, 22.812513320529067],
              [108.375820741778327, 22.812516354993498],
              [108.37582698319784, 22.812519281303629],
              [108.375833274588729, 22.812522098573481],
              [108.375839614046157, 22.812524805950083],
              [108.375845999650778, 22.812527402613746],
              [108.375852429469262, 22.812529887778286],
              [108.375858901554892, 22.812532260691292],
              [108.375865413948162, 22.812534520634326],
              [108.375871964677344, 22.812536666923162],
              [108.375878551759115, 22.812538698907979],
              [108.375885173199151, 22.812540615973564],
              [108.375891826992714, 22.812542417539508],
              [108.375898511125271, 22.81254410306035],
              [108.375905223573113, 22.812545672025781],
              [108.37591196230396, 22.812547123960776],
              [108.375918725277558, 22.812548458425738],
              [108.375925510446322, 22.812549675016644],
              [108.375932315755946, 22.812550773365146],
              [108.375939139146041, 22.812551753138713],
              [108.375945978550718, 22.812552614040701],
              [108.375952831899255, 22.812553355810458],
              [108.375959697116713, 22.812553978223402],
              [108.37596657212454, 22.812554481091095],
              [108.375973454841244, 22.812554864261283],
              [108.375980343182974, 22.812555127617955],
              [108.375987235064201, 22.812555271081379],
              [108.375994128398304, 22.812555294608117],
              [108.376001021098233, 22.812555198191045],
              [108.376007911077139, 22.812554981859357],
              [108.376014796248953, 22.812554645678549],
              [108.376021674529127, 22.812554189750408],
              [108.376028543835147, 22.812553614212966],
              [108.376035402087254, 22.812552919240481],
              [108.376042247208986, 22.812552105043363],
              [108.376049077127917, 22.812551171868122],
              [108.376055889776183, 22.81255011999729],
              [108.376062683091149, 22.812548949749335],
              [108.376069455016065, 22.812547661478565],
              [108.376076203500617, 22.812546255575022],
              [108.376082926501624, 22.812544732464364],
              [108.376089621983596, 22.812543092607733],
              [108.376096287919381, 22.812541336501621],
              [108.376102922290769, 22.812539464677709],
              [108.376109523089127, 22.812537477702723],
              [108.376116088315968, 22.812535376178243],
              [108.376122615983576, 22.812533160740536],
              [108.376129104115606, 22.812530832060354],
              [108.376135550747676, 22.812528390842743],
              [108.376141953927998, 22.812525837826811],
              [108.376148311717913, 22.812523173785525],
              [108.376154622192516, 22.812520399525454],
              [108.376160883441216, 22.812517515886544],
              [108.376167093568327, 22.812514523741861],
              [108.376173250693654, 22.812511423997314],
              [108.376179352953045, 22.812508217591397],
              [108.376185398498961, 22.812504905494894],
              [108.376191385501002, 22.812501488710588],
              [108.376197312146559, 22.812497968272954],
              [108.376203176641226, 22.812494345247856],
              [108.376208977209458, 22.81249062073222],
              [108.376214712095063, 22.812486795853687],
              [108.376220379561701, 22.8124828717703],
              [108.376225977893483, 22.812478849670121],
              [108.376231505395438, 22.812474730770905],
              [108.376236960394024, 22.812470516319699],
              [108.376242341237671, 22.812466207592493],
              [108.376247646297273, 22.812461805893808],
              [108.376252873966621, 22.812457312556326],
              [108.376258022662981, 22.81245272894046],
              [108.376263090827507, 22.812448056433972],
              [108.37626807692574, 22.812443296451519],
              [108.376272979448089, 22.812438450434261],
              [108.376277796910216, 22.812433519849389],
              [108.37628252785359, 22.812428506189711],
              [108.376287170845856, 22.812423410973182],
              [108.376291724481263, 22.812418235742449],
              [108.376296187381143, 22.81241298206438],
              [108.376300558194302, 22.812407651529607],
              [108.376304835597395, 22.812402245752022],
              [108.376309018295387, 22.812396766368295],
              [108.376313105021922, 22.81239121503739],
              [108.376317094539672, 22.812385593440045],
              [108.37632098564076, 22.812379903278281],
              [108.376324777147104, 22.812374146274873],
              [108.376328467910767, 22.81236832417283],
              [108.37633134020524, 22.812363388262217],
              [108.37633412661198, 22.812358403362357],
              [108.376336826295699, 22.8123533709676],
              [108.37633943844709, 22.812348292586535],
              [108.376341962283107, 22.812343169741531],
              [108.376344397047149, 22.812338003968289],
              [108.376346742009346, 22.812332796815383],
              [108.376348996466746, 22.812327549843779],
              [108.376351159743507, 22.812322264626395],
              [108.376353231191132, 22.812316942747604],
              [108.376355210188663, 22.812311585802771],
              [108.376357096142826, 22.812306195397777],
              [108.376358888488284, 22.812300773148529],
              [108.376360586687724, 22.812295320680484],
              [108.376362190232072, 22.81228983962815],
              [108.376363698640617, 22.812284331634615],
              [108.376365111461183, 22.812278798351034],
              [108.376366428270245, 22.812273241436149],
              [108.376367648673053, 22.812267662555783],
              [108.376368772303749, 22.812262063382345],
              [108.376369798825522, 22.812256445594329],
              [108.37637072793062, 22.812250810875803],
              [108.376371559340541, 22.812245160915921],
              [108.376372292806039, 22.812239497408392],
              [108.37637292810723, 22.812233822051002],
              [108.376373465053689, 22.812228136545073],
              [108.376373903484449, 22.812222442594987],
              [108.37637424326806, 22.812216741907637],
              [108.376374484302673, 22.812211036191954],
              [108.376374626516039, 22.812205327158367],
              [108.376374669865527, 22.812199616518303],
              [108.376374614338133, 22.812193905983666],
              [108.376374459950497, 22.81218819726633],
              [108.37637420674892, 22.812182492077628],
              [108.376373854809287, 22.812176792127836],
              [108.376373404237114, 22.812171099125656],
              [108.37637285516746, 22.812165414777702],
              [108.376372207764931, 22.812159740788001],
              [108.376371462223602, 22.812154078857478],
              [108.376370618766956, 22.812148430683433],
              [108.376369677647858, 22.812142797959048],
              [108.376368639148424, 22.812137182372876],
              [108.376367503579971, 22.812131585608327],
              [108.376366271282905, 22.812126009343171],
              [108.376364942626651, 22.812120455249033],
              [108.376363518009498, 22.812114924990894],
              [108.37636199785851, 22.81210942022658],
              [108.3763603826294, 22.812103942606289],
              [108.376358672806361, 22.812098493772073],
              [108.376096034047421, 22.811669584254442],
              [108.376518902585929, 22.811440027047833],
              [108.374719841470423, 22.808569123636765],
              [108.373219952654267, 22.809377751842025],
              [108.37502117126229, 22.812241319778444],
            ],
          ],
        ],
      },
    },
    {
      type: "Feature",
      properties: {
        id: "E",
        name: "E区",
        center: [108.37362920985845, 22.808423741423113],
        ...getStyles("E区"),
      },
      geometry: {
        type: "MultiPolygon",
        coordinates: [
          [
            [
              [108.373162994851157, 22.809297205453731],
              [108.374681294270374, 22.808475632293213],
              [108.374098483617956, 22.807549924159268],
              [108.372579896533125, 22.808374949307854],
              [108.373162994851157, 22.809297205453731],
            ],
          ],
        ],
      },
    },
  ],
};

let viewer = null;
let bufferLayerId = "";
let markedId = "";
let build: any = null;
const defaultKeys = { inherent: [], temporary: [] };
const SceneLinkageMap = (props: SceneLinkageMapProps) => {
  const { className, setVisible, visible, onClose, onChange, style } = props;
  const mainView = globalState.get("mainView");
  const buildingView = globalState.get("buildingView");
  const areaList: any = [
    {
      label: "主视角",
      value: "main",
      view: mainView,
    },
    {
      label: "A区",
      value: "A",
      buildId: "Area_A",
      floors: [
        {
          label: "还原",
          value: "",
        },
        {
          label: "1F",
          value: "1",
          view: buildingView?.["A1"],
        },
        {
          label: "-1F",
          value: "-1",
          view: buildingView?.["A-1"],
        },
      ],
    },
    {
      label: "B区",
      value: "B",
      buildId: "Area_B",
      floors: [
        {
          label: "还原",
          value: "",
        },
        {
          label: "1F",
          value: "1",
          view: buildingView?.["B1"],
        },
        {
          label: "2F",
          value: "2",
          view: buildingView?.["B2"],
        },
      ],
    },
    {
      label: "D区",
      value: "D",
      buildId: "Area_D",
      floors: [
        {
          label: "还原",
          value: "",
        },
        {
          label: "1F",
          value: "1",
          view: buildingView?.["D1"],
        },
        {
          label: "2F",
          value: "2",
          view: buildingView?.["D2"],
        },
      ],
    },
    {
      label: "E区",
      value: "E",
      buildId: "Area_E",
      floors: [
        {
          label: "还原",
          value: "",
        },
        {
          label: "1F",
          value: "1",
          view: buildingView?.["E1"],
        },
      ],
    },
  ];
  const { solutionId, center, zoom } = window.globalConfig;
  const [kmap, setKmap] = useState(null);
  const location = useLocation();
  const [active, setActive] = useState("main");
  const [current, setCurrent] = useState(areaList[0]);
  const [activeFloor, setActiveFloor] = useState("");
  const [buildingId, setBuildingId] = useState("");
  const [lngLat, setLngLat] = useState([mainView.lng, mainView.lat]);
  const [showKey, setShowKey]: any = useState(defaultKeys);
  const [hideKey, setHideKey]: any = useState(defaultKeys);
  useEffect(() => {
    if (!props.viewer) return;
    viewer = props.viewer;
    store.viewer = props.viewer;
    viewer.off("camera_change");
    viewer.on(
      "camera_change",
      debounce((info) => {
        try {
          const cameraInfo = JSON.stringify(info);
          if (cameraInfo !== "{}") {
            // 这个时候info就可以拿到相机的信息
            const { lng, lat, alt, fov, pitch, roll } = info;
            setLngLat([lng, lat]);
          } else {
            viewer.getCameraInfo().then((res) => {
              // 获取相机位置
              const { lng, lat, alt, fov, pitch, roll } = res;
              setLngLat([lng, lat]);
            });
          }
        } catch (e) {}
      }, 1500)
    );
    build = new window["KMapUE"].SplitBuilding(props.viewer);
  }, [props.viewer]);
  useEffect(() => {
    kmap && deviceViewLayer();
  }, [kmap, lngLat]);
  useEffect(() => {
    const timer = setTimeout(() => {
      // 在延迟时间结束后执行逻辑
      if (buildingId && activeFloor && viewer) {
        // buildingFloorDetail();
      } else {
        resetSplitBuild(buildingId);
      }
    }, 1000);
    // 每次输入值改变时，清除之前的定时器
    return () => {
      clearTimeout(timer);
    };
  }, [buildingId, activeFloor, viewer]);
  // useEffect(() => {
  //   const timer = setTimeout(() => {
  //     // 在延迟时间结束后执行逻辑
  //     onChange && onChange({ buildingId, activeFloor, showKey, hideKey });
  //   }, 1000);
  //   // 每次输入值改变时，清除之前的定时器
  //   return () => {
  //     clearTimeout(timer);
  //   };
  // }, [showKey, hideKey, buildingId, activeFloor]);
  const flyTo = async (views) => {
    const cameraInfo = viewer ? await viewer.getCameraInfo() : {};
    viewer &&
      viewer.flyTo({
        ...cameraInfo,
        ...views,
      });
  };
  const onLoad = (res) => {
    setKmap(res.map);
    res.map.setMapOperationProperty({
      boxZoom: false,
      doubleClickZoom: false,
      dragPan: false,
      dragRotate: false,
      keyboard: false,
      scrollZoom: false,
      touchZoomRotate: false,
    });
    res.map.addEventOnMap({
      event: "click",
      handler: (res) => {
        const { lngLat } = res;
        const point = [lngLat.lng, lngLat.lat];
        console.log(point, "point");
        flyTo(lngLat);
      },
    });
    const layerId = res.map.addGeometryLayer({
      data,
      showPolygonOutline: true,
      ended: function (res) {
        console.log(res);
      },
    });
    addText(res.map);
  };
  const addText = (kmap) => {
    const points = data.features.map((item: any) => {
      return {
        point: item.properties.center,
        htmlText: item?.properties?.name,
      };
    });
    kmap.addTexts({
      points,
      textType: "text-class-name",
      ended: function (res) {
        if (res.status === 10) {
          // to do sth
        }
      },
    });
  };
  const deviceViewLayer = async () => {
    if (bufferLayerId) {
      kmap && kmap.removeLayer({ layerId: bufferLayerId });
      bufferLayerId = "";
    }
    addMarker(lngLat);
  };
  const clearMarker = () => {
    if (!kmap) return;
    if (markedId) {
      kmap.removeMarkersById({
        id: markedId,
      });
      markedId = "";
    }
  };
  const addMarker = (point) => {
    if (!kmap || !point.length) return;
    clearMarker();
    kmap.addMarker({
      url: cameraUrl,
      anchor: "bottom",
      point: point,
      // cssClassName: "serarch-marker",
      ended: (res) => {
        markedId = res.data;
      },
    });
  };
  //楼宇拆分
  const splitBuild = (buildId, floor) => {
    try {
      setBuildingId(buildId);
      build &&
        floor &&
        build.splitBuild({
          buildId,
          floor,
          onComplete: (res) => {
            console.log("========splitBuild==========", res);
          },
          onError: (err) => {
            console.error("========splitBuild Err==========", err);
          },
        });
    } catch (error) {}
  };
  //重置分层
  const resetSplitBuild = (buildId) => {
    try {
      setBuildingId("");
      build && build.resetSplitBuild(buildId);
    } catch (error) {}
  };
  const buildingFloorDetail = async () => {
    try {
      // store.removeAllFeature();
      const planId = await getPlanId();
      const venueId = getVenueId();
      const row = areaList.find((item) => item.buildId == buildingId);
      const { floors = [] } = row;
      const params = {
        planId: location.pathname != "/site_manage" ? planId : "",
        venueId,
        buildingId,
        floor: activeFloor,
      };
      const res = await webApi.buildingFloorDetail(params);
      if (res?.length > 0) {
        const inherentKeys = res
          .filter((item) => item.type == "inherent")
          .map((item) => item.id);
        const temporaryKeys = res
          .filter((item) => item.type == "temporary")
          .map((item) => item.id);
        setShowKey({
          inherent: inherentKeys,
          temporary: temporaryKeys,
        });
      } else {
        setShowKey(defaultKeys);
      }
      if (floors.length > 1) {
        const hideFloors = floors.find((item) => item.value != activeFloor);
        const params1 = {
          planId: location.pathname != "/site_manage" ? planId : "",
          venueId,
          buildingId,
          floor: hideFloors.value,
        };
        const res1 = await webApi.buildingFloorDetail(params1);
        if (res1.length > 0) {
          const inherentKeys1 = res1
            .filter((item) => item.type == "inherent")
            .map((item) => item.id);
          const temporaryKeys1 = res1
            .filter((item) => item.type == "temporary")
            .map((item) => item.id);
          setHideKey({
            inherent: inherentKeys1,
            temporary: temporaryKeys1,
          });
        } else {
          setHideKey(defaultKeys);
        }
      } else {
        setHideKey(defaultKeys);
      }
    } catch (error) {}
  };
  /**
   * 切换视角
   * @param type 是否是主视角
   */
  const changeView = async (type) => {
    try {
      const cameraInfo = await viewer.getCameraInfo();
      if (type) {
        viewer.flyTo({
          ...cameraInfo,
          pitch: mainView.pitch,
          alt: mainView.alt,
        });
      } else {
        viewer.flyTo({
          ...cameraInfo,
          pitch: -90,
          alt: 200,
        });
      }
    } catch (error) {}
  };
  return (
    <div
      className={classNames(
        "scene-linkage-map-wrap",
        className,
        !visible && "hide"
      )}
      style={style}
    >
      <div className="scene-linkage-header">
        {areaList.map((item) => (
          <div
            className={classNames("area-li", active === item.value && "active")}
            key={item.value}
            onClick={debounce(() => {
              if (active === item.value && active != "main") return;
              setActive(item.value);
              setCurrent(item);
              if (["main"].includes(item.value)) {
                setActiveFloor("");
                if (item.view) {
                  flyTo(item.view);
                }
                resetSplitBuild(current?.buildId);
                // store.removeAllFeature();
                setShowKey(defaultKeys);
                setHideKey(defaultKeys);
              } else {
                resetSplitBuild(current?.buildId);
                setActiveFloor("");
                // if (item.floors[1].view) {
                //   flyTo(item.floors[1].view);
                // }
                // setTimeout(() => {
                //   splitBuild(item.buildId, "1");
                // }, 200);
              }
            }, 600)}
          >
            {item.label}
          </div>
        ))}
        <div
          className="scene-linkage-close"
          onClick={() => {
            setVisible(false);
            onClose && onClose();
          }}
        >
          <IconClose />
        </div>
      </div>
      <div className="map-box">
        {current.floors && (
          <div className="floor-box">
            <div className="area-label">{current.label}室内</div>
            {current.floors?.length > 0 && (
              <div className="floor-con">
                {current.floors.map((item) => (
                  <div
                    className={classNames(
                      "floor-li",
                      activeFloor === item.value && "active"
                    )}
                    key={item.value}
                    onClick={debounce(() => {
                      setActiveFloor(item.value);
                      if (item.view) {
                        flyTo(item.view);
                      }
                      splitBuild(current.buildId, item.value);
                    }, 600)}
                  >
                    {item.label}
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        <MapContent
          solutionId={solutionId}
          center={center}
          zoom={zoom}
          onLoad={async (res) => {
            if (res.status === 10) {
              onLoad(res);
            }
          }}
        ></MapContent>
      </div>
      <div
        className="scene-change-view-wrap"
        style={{ display: visible ? "flex" : "none" }}
      >
        <div className="device-toushi">
          <label htmlFor="">设备透视</label>
          <Switch
            size="small"
            checked={appStore.devicePerspectiveVisible}
            onChange={(val) => {
              appStore.devicePerspectiveVisible = val;
              store.setDevicePerspective(val);
              // storeFloat.setDevicePerspective(val);
            }}
          />
          <span style={{ marginLeft: 5 }}>
            {appStore.devicePerspectiveVisible ? "开" : "关"}
          </span>
        </div>
        <Button
          type="secondary"
          size="small"
          onClick={() => {
            changeView(false);
          }}
          style={{ marginRight: 10 }}
        >
          俯视角
        </Button>
        <Button
          type="primary"
          size="small"
          onClick={() => {
            changeView(true);
          }}
        >
          正视角
        </Button>
      </div>
    </div>
  );
};
export default observer(SceneLinkageMap);
