define(["exports","./when-cbf8cd21","./Check-35e1a91d","./Math-e66fad2a","./Cartesian2-44433f55","./Transforms-23521d7e","./ComponentDatatype-7ee14e67","./GeometryAttribute-b1aaa48a","./GeometryAttributes-90846c5f","./IndexDatatype-66caba23","./GeometryOffsetAttribute-84f7eff3"],function(i,D,t,I,T,z,L,R,N,B,S){"use strict";var f=new T.Cartesian3(1,1,1),U=Math.cos,F=Math.sin;function l(i){i=D.defaultValue(i,D.defaultValue.EMPTY_OBJECT);var t=D.defaultValue(i.radii,f),e=D.defaultValue(i.innerRadii,t),a=D.defaultValue(i.minimumClock,0),n=D.defaultValue(i.maximumClock,I.CesiumMath.TWO_PI),r=D.defaultValue(i.minimumCone,0),o=D.defaultValue(i.maximumCone,I.CesiumMath.PI),s=Math.round(D.defaultValue(i.stackPartitions,10)),m=Math.round(D.defaultValue(i.slicePartitions,8)),u=Math.round(D.defaultValue(i.subdivisions,128));this._radii=T.Cartesian3.clone(t),this._innerRadii=T.Cartesian3.clone(e),this._minimumClock=a,this._maximumClock=n,this._minimumCone=r,this._maximumCone=o,this._stackPartitions=s,this._slicePartitions=m,this._subdivisions=u,this._offsetAttribute=i.offsetAttribute,this._workerName="createEllipsoidOutlineGeometry"}l.packedLength=2*T.Cartesian3.packedLength+8,l.pack=function(i,t,e){return e=D.defaultValue(e,0),T.Cartesian3.pack(i._radii,t,e),e+=T.Cartesian3.packedLength,T.Cartesian3.pack(i._innerRadii,t,e),e+=T.Cartesian3.packedLength,t[e++]=i._minimumClock,t[e++]=i._maximumClock,t[e++]=i._minimumCone,t[e++]=i._maximumCone,t[e++]=i._stackPartitions,t[e++]=i._slicePartitions,t[e++]=i._subdivisions,t[e]=D.defaultValue(i._offsetAttribute,-1),t};var c=new T.Cartesian3,C=new T.Cartesian3,_={radii:c,innerRadii:C,minimumClock:void 0,maximumClock:void 0,minimumCone:void 0,maximumCone:void 0,stackPartitions:void 0,slicePartitions:void 0,subdivisions:void 0,offsetAttribute:void 0};l.unpack=function(i,t,e){t=D.defaultValue(t,0);var a=T.Cartesian3.unpack(i,t,c),n=(t+=T.Cartesian3.packedLength,T.Cartesian3.unpack(i,t,C)),r=(t+=T.Cartesian3.packedLength,i[t++]),o=i[t++],s=i[t++],m=i[t++],u=i[t++],f=i[t++],d=i[t++],i=i[t];return D.defined(e)?(e._radii=T.Cartesian3.clone(a,e._radii),e._innerRadii=T.Cartesian3.clone(n,e._innerRadii),e._minimumClock=r,e._maximumClock=o,e._minimumCone=s,e._maximumCone=m,e._stackPartitions=u,e._slicePartitions=f,e._subdivisions=d,e._offsetAttribute=-1===i?void 0:i,e):(_.minimumClock=r,_.maximumClock=o,_.minimumCone=s,_.maximumCone=m,_.stackPartitions=u,_.slicePartitions=f,_.subdivisions=d,_.offsetAttribute=-1===i?void 0:i,new l(_))},l.createGeometry=function(i){var t=i._radii;if(!(t.x<=0||t.y<=0||t.z<=0)){var e=i._innerRadii;if(!(e.x<=0||e.y<=0||e.z<=0)){for(var a,n,r=i._minimumClock,o=i._maximumClock,s=i._minimumCone,m=i._maximumCone,u=i._subdivisions,f=T.Ellipsoid.fromCartesian3(t),d=i._slicePartitions+1,l=i._stackPartitions+1,c=((d=Math.round(d*Math.abs(o-r)/I.CesiumMath.TWO_PI))<2&&(d=2),(l=Math.round(l*Math.abs(m-s)/I.CesiumMath.PI))<2&&(l=2),0),C=1,_=e.x!==t.x||e.y!==t.y||e.z!==t.z,h=!1,p=!1,y=(_&&(C=2,0<s&&(h=!0,c+=d),m<Math.PI&&(p=!0,c+=d)),u*C*(l+d)),k=new Float64Array(3*y),b=B.IndexDatatype.createTypedArray(y,2*(y+c-(d+l)*C)),v=0,A=new Array(l),x=new Array(l),P=0;P<l;P++)A[P]=F(n=s+P*(m-s)/(l-1)),x[P]=U(n);var w=new Array(u),M=new Array(u);for(P=0;P<u;P++)w[P]=F(a=r+P*(o-r)/(u-1)),M[P]=U(a);for(P=0;P<l;P++)for(g=0;g<u;g++)k[v++]=t.x*A[P]*M[g],k[v++]=t.y*A[P]*w[g],k[v++]=t.z*x[P];if(_)for(P=0;P<l;P++)for(g=0;g<u;g++)k[v++]=e.x*A[P]*M[g],k[v++]=e.y*A[P]*w[g],k[v++]=e.z*x[P];for(A.length=u,x.length=u,P=0;P<u;P++)A[P]=F(n=s+P*(m-s)/(u-1)),x[P]=U(n);for(w.length=d,M.length=d,P=0;P<d;P++)w[P]=F(a=r+P*(o-r)/(d-1)),M[P]=U(a);for(P=0;P<u;P++)for(g=0;g<d;g++)k[v++]=t.x*A[P]*M[g],k[v++]=t.y*A[P]*w[g],k[v++]=t.z*x[P];if(_)for(P=0;P<u;P++)for(g=0;g<d;g++)k[v++]=e.x*A[P]*M[g],k[v++]=e.y*A[P]*w[g],k[v++]=e.z*x[P];for(P=v=0;P<l*C;P++)for(var V=P*u,g=0;g<u-1;g++)b[v++]=V+g,b[v++]=V+g+1;var G=l*u*C;for(P=0;P<d;P++)for(g=0;g<u-1;g++)b[v++]=G+P+g*d,b[v++]=G+P+(g+1)*d;if(_)for(G=l*u*C+d*u,P=0;P<d;P++)for(g=0;g<u-1;g++)b[v++]=G+P+g*d,b[v++]=G+P+(g+1)*d;if(_){var E=l*u*C,O=E+u*d;if(h)for(P=0;P<d;P++)b[v++]=E+P,b[v++]=O+P;if(p)for(E+=u*d-d,O+=u*d-d,P=0;P<d;P++)b[v++]=E+P,b[v++]=O+P}y=new N.GeometryAttributes({position:new R.GeometryAttribute({componentDatatype:L.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:k})});return D.defined(i._offsetAttribute)&&(c=k.length,_=new Uint8Array(c/3),h=i._offsetAttribute===S.GeometryOffsetAttribute.NONE?0:1,S.arrayFill(_,h),y.applyOffset=new R.GeometryAttribute({componentDatatype:L.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:_})),new R.Geometry({attributes:y,indices:b,primitiveType:R.PrimitiveType.LINES,boundingSphere:z.BoundingSphere.fromEllipsoid(f),offsetAttribute:i._offsetAttribute})}}},i.EllipsoidOutlineGeometry=l});
